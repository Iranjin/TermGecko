#!/usr/bin/env python
import contextlib as __stickytape_contextlib

@__stickytape_contextlib.contextmanager
def __stickytape_temporary_dir():
    import tempfile
    import shutil
    dir_path = tempfile.mkdtemp()
    try:
        yield dir_path
    finally:
        shutil.rmtree(dir_path)

with __stickytape_temporary_dir() as __stickytape_working_dir:
    def __stickytape_write_module(path, contents):
        import os, os.path

        def make_package(path):
            parts = path.split("/")
            partial_path = __stickytape_working_dir
            for part in parts:
                partial_path = os.path.join(partial_path, part)
                if not os.path.exists(partial_path):
                    os.mkdir(partial_path)
                    with open(os.path.join(partial_path, "__init__.py"), "wb") as f:
                        f.write(b"\n")

        make_package(os.path.dirname(path))

        full_path = os.path.join(__stickytape_working_dir, path)
        with open(full_path, "wb") as module_file:
            module_file.write(contents)

    import sys as __stickytape_sys
    __stickytape_sys.path.insert(0, __stickytape_working_dir)

    __stickytape_write_module('common.py', b"# -*- coding: utf-8 -*-\n\nimport platform\nimport os\nimport sys\nimport re\n\n\ndef set_console_title(title: str): ...\n# sys.stdout.write('\\033]0;%s\\007' % (title))\n# sys.stdout.flush()\n\n\ndef digit_count(decimal: int, base: int = 10):\n    count = 0\n    while decimal != 0:\n        decimal //= base\n        count += 1\n    return count\n\n\ndef is_valid_ip_address(ip_address: str) -> bool:\n    return re.match(r'^192\\.168\\.\\d{1,3}\\.\\d{1,3}$', ip_address) is not None\n\n\ndef remove_white_space(string_: str):\n    for white_space in ' \\t\\n\\r\\v\\f':\n        string_ = string_.replace(white_space, '')\n    return string_\n\n\ndef clear():\n    os_name = platform.platform()\n    if 'Windows' in os_name:\n        os.system('cls')\n    elif 'macOS' in os_name or 'Linux' in os_name:\n        os.system('clear')\n    else:\n        print('\\n' * 99)\n\n    # os_system = platform.system()\n\n    # if os_system == 'Windows':\n    #     os.system('cls')\n    # elif os_system == 'Linux' or os_system == 'Darwin':\n    #     os.system('clear')\n    # else:\n    #     print('\\n' * 100)\n\n    # system_platform = platform.system()\n    # input(system_platform)\n\n    # if system_platform == 'Windows':\n    #     os.system('cls')\n    # elif system_platform == 'Darwin':\n    #     os.system('clear')\n    # elif system_platform == 'Linux':\n    #     os.system('clear')\n    # elif system_platform == 'iOS':\n    #     print('\\n' * 100)\n    # elif system_platform == 'Android':\n    #     os.system('clear')\n    # else:\n    #     # print('Clearing console not supported on \\'%s\\'' % (system_platform))\n    #     print('\\n' * 100)\n")
    __stickytape_write_module('termgecko.py', b"# -*- coding: utf-8 -*-\n\nimport libs.fs as fs\nfrom typing import Optional\nfrom libs.language import Language\nfrom libs.cmdparser import Command\nfrom common import *\nfrom libs.config import Config\nfrom tabs.Menu import Menu\nfrom time import sleep\nfrom libs.language_codes import LANGUAGE_CODES\n\n### Tabs ##########################\nfrom tabs.Code import CodeMenu\nfrom tabs.Exit import ExitMenu\nfrom tabs.Help import HelpMenu\nfrom tabs.Setting import SettingMenu\n###################################\n\n\nclass TermGecko:\n    def __init__(self, debug_mode: bool = False):\n        # self.__init = False\n        self.__debug_mode = debug_mode\n        self.__tabs: list[Menu] = []\n        self.__current_tab: Optional[Menu] = None\n        self.__config = Config()\n        self.__language = Language()\n        # self.add_tab(*tabs)\n\n    def add_menu(self, *tabs: Menu):\n        for tab in tabs:\n            self.__tabs.append(tab)\n\n    def __check_language(self):\n        def download_language(language_code: str):\n            file_bin = fs.get_file(\n                'https://raw.githubusercontent.com/Iranjin/TermGecko/main/languages/%s.lng' % (language_code))\n            fs.File('languages/%s.lng' % (language_code)).write(file_bin)\n\n        clear()\n\n        language_code = self.__config.get('General', 'Language', 'ja_JP')\n        if language_code not in LANGUAGE_CODES:\n            print(' - Invalid language code' + (\n                ' in \\'' + self.__config.path +\n                '\\'' if self.__config.loaded and self.__config.path else ''\n            ))\n            return -1\n\n        self.__config.save()\n\n        folder = fs.Folder('languages/')\n        language_files = folder.glob(r'.*\\.lng')\n\n        # \xe8\xa8\x80\xe8\xaa\x9e\xe3\x83\x95\xe3\x82\xa1\xe3\x82\xa4\xe3\x83\xab\xe3\x81\x8c\xe3\x81\x82\xe3\x81\xa3\xe3\x81\x9f\xe5\xa0\xb4\xe5\x90\x88\n        if language_files:\n            if language_code not in [file.name.rstrip('.lng') for file in language_files]:\n                print(' - Language file \\'%s.lng\\' not found' %\n                      (language_code))\n                return -1\n        else:\n            print(' - Language file not found')\n            sleep(1)\n            print(' - Downloading language files...')\n\n            if not folder.exists():\n                folder.create()\n                print(' - Created language folder')\n\n            download_language(language_code)\n\n            print(' - Success')\n            sleep(2)\n            clear()\n\n        self.__language.load(os.path.join(folder.path, language_code + '.lng'))\n\n        return 0\n\n    def init(self):\n        self.__config.load('config.ini')\n        lang_status = self.__check_language()\n        if lang_status != 0:\n            exit()\n\n        self.add_menu(\n            CodeMenu(self.__config, self.__language),\n            ExitMenu(self.__config, self.__language),\n            HelpMenu(self.__config, self.__language),\n            SettingMenu(self.__config, self.__language),\n        )\n\n        set_console_title('debug')\n\n    # @property\n    # def tabs(self):\n    #     return self.__tabs\n\n    # def add_tab(self, *tabs: Tab):\n\n    #     for tab in tabs:\n    #         self.__tabs.append(tab)\n\n    def proc(self):\n        clear()\n\n        command = Command(\n            arg1=(str, lambda x: any(\n                [x.strip() in [key for key in tab.keys] for tab in self.__tabs]))\n        )\n\n        try:\n            selected_tab = command.input('TermGecko%s > ' % (\n                ('[DEBUG]' if self.__debug_mode else '')\n            )).get('arg1')\n        except ValueError:\n            return\n        else:\n            if selected_tab.valid == False:\n                return\n\n        self.__current_tab = next(\n            (tab for tab in self.__tabs if selected_tab.arg in tab.keys), None)\n\n        while True:\n            clear()\n            status = self.__current_tab.run()\n            if status == 0:\n                break\n")
    __stickytape_write_module('libs/fs/__init__.py', b'# -*- coding: utf-8 -*-\n\nfrom .file import File, get_file\nfrom .folder import Folder\n')
    __stickytape_write_module('libs/fs/file.py', b"# -*- coding: utf-8 -*-\n\nfrom .imports import *\n\n\nclass File:\n    def __init__(self, path: str = '', encoding: Optional[str] = None) -> None:\n        self.path = path\n        self.__enc = encoding\n\n    def __str__(self) -> str:\n        return self.path\n\n    def __detect_encoding(self, path: str):\n        # TODO \xe7\xa8\xae\xe9\xa1\x9e\xe3\x81\x8c\xe5\xb0\x91\xe3\x81\xaa\xe3\x81\x84\n        encodings = [\n            'cp932',\n            'ascii',\n            'utf-8',\n            'utf-16',\n        ]\n        with open(path, 'rb') as f:\n            file_bin = f.read()\n        for encoding in encodings:\n            try:\n                file_bin.decode(encoding)\n            except UnicodeDecodeError:\n                pass\n            else:\n                return encoding\n        return None\n\n    def exists(self) -> bool:\n        return os.path.exists(self.path)\n\n    def is_file(self) -> bool:\n        return os.path.isfile(self.path)\n\n    @property\n    def fp(self):\n        return io.BytesIO(self.read(bytes))\n\n    @property\n    def encoding(self) -> str:\n        return self.__enc\n\n    @property\n    def current_dir(self) -> str:\n        return os.path.dirname(self.path)\n\n    @property\n    def name(self) -> str:\n        return os.path.basename(self.path)\n\n    def rename(self, name: str) -> 'File':\n        os.rename(\n            self.path,\n            os.path.join(self.current_dir, name)\n        )\n        return self\n\n    def create(self) -> 'File':\n        with open(self.path, 'a') as f:\n            pass\n        return self\n\n    def size(self) -> int:\n        return os.path.getsize(self.path)\n\n    def remove(self) -> 'File':\n        os.remove(self.path)\n        return self\n\n    def write(self, data: Union[str, int, bytes], over_write: bool = True) -> 'File':\n        mode: str = 'w' if over_write else 'a'\n\n        if isinstance(data, (str, int)):\n            with open(self.path, mode, encoding=self.__enc) as f:\n                f.write(str(data))\n        elif isinstance(data, bytes):\n            mode += 'b'\n            with open(self.path, mode) as f:\n                f.write(data)\n        else:\n            raise TypeError('Unsupported operand type for write(): \\'%s\\'' % (\n                type(data).__name__))\n\n        return self\n\n    def read(self, type_: Union[str, int, bytes] = str) -> Union[str, int, bytes]:\n        if type_ == str or type_ == int:\n            result: str = ''\n            encoding = self.__enc\n            if encoding is None:\n                encoding = self.__detect_encoding(self.path)\n            with open(self.path, 'r', encoding=self.__enc) as f:\n                result = f.read()\n            return type_(result)\n        elif type_ == bytes:\n            result: bytes = b''\n            with open(self.path, 'rb') as f:\n                result = f.read()\n            return result\n        else:\n            raise TypeError('Unsupported operand type for read(): \\'%s\\'' % (\n                type_.__name__))\n\n\ndef get_file(\n    url: str,\n    obj: type = bytes,\n    encoding: Optional[str] = None,\n    headers: Optional[dict[str, str]] = None\n) -> Union[str, Any]:\n    if headers is None:\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}\n\n    ssl._create_default_https_context: ssl.SSLContext = ssl._create_unverified_context\n\n    req = urllib.request.Request(url, headers=headers)\n    response: bytes = urllib.request.urlopen(req).read()\n\n    if obj == bytes:\n        return response\n    else:\n        return obj(response.decode(encoding))\n")
    __stickytape_write_module('libs/fs/imports.py', b'# -*- coding: utf-8 -*-\n\nimport os\nimport urllib.request\nimport ssl\nimport io\nimport re\nfrom typing import (\n    Union,\n    Optional,\n    Any\n)\n')
    __stickytape_write_module('libs/fs/folder.py', b"# -*- coding: utf-8 -*-\n\nfrom .imports import *\nfrom .file import File\n\n\nclass Folder:\n    def __init__(self, path: str) -> None:\n        self.path: str = path\n\n    def __str__(self) -> str:\n        return self.path\n\n    def exists(self) -> bool:\n        return os.path.exists(self.path)\n\n    def is_dir(self) -> bool:\n        return os.path.isdir(self.path)\n\n    def create(self) -> 'Folder':\n        os.makedirs(self.path)\n        return self\n\n    def remove(self) -> 'Folder':\n        for root, dirs, files in os.walk(self.path, topdown=False):\n            for file in files:\n                os.remove(os.path.join(root, file))\n            for dir in dirs:\n                os.rmdir(os.path.join(root, dir))\n        os.rmdir(self.path)\n        return self\n\n    def glob(self, pattern: str, return_path: bool = False) -> list[Union[str, File]]:\n        pattern_ = re.compile(pattern)\n\n        matches: list[Union[str, File]] = []\n        for root, _, files in os.walk(self.path):  # NOTE _\xe3\x81\xaf\xe3\x83\x87\xe3\x82\xa3\xe3\x83\xac\xe3\x82\xaf\xe3\x83\x88\xe3\x83\xaa\n            for file in files:\n                if pattern_.match(file):\n                    path = os.path.join(root, file)\n                    matches.append(path if return_path else File(path))\n\n        return matches\n")
    __stickytape_write_module('libs/language.py', b'# -*- coding: utf-8 -*-\n\nimport os\nfrom typing import Optional\n\n\nclass Language:\n    def __init__(self):\n        self.__path = None\n        self.__encoding = None\n        self.__data = None\n\n    def __detect_encoding(self, path: str):\n        # TODO \xe7\xa8\xae\xe9\xa1\x9e\xe3\x81\x8c\xe5\xb0\x91\xe3\x81\xaa\xe3\x81\x84\n        encodings = [\n            \'cp932\',\n            \'ascii\',\n            \'utf-8\',\n            \'utf-16\',\n        ]\n        with open(path, \'rb\') as f:\n            file_bin = f.read()\n        for encoding in encodings:\n            try:\n                file_bin.decode(encoding)\n            except UnicodeDecodeError:\n                pass\n            else:\n                return encoding\n        return None\n\n    # def __section_error(self, section_name: str):\n    #     raise KeyError(\'Invalid or missing %s section in the language file.\' % (section_name))\n\n    @property\n    def loaded(self):\n        return self.__data is not None\n\n    def load(self, path: str, encoding: Optional[str] = None):\n        if not os.path.exists(path):\n            raise FileNotFoundError(\'File \\\'%s\\\' not found\' % (path))\n\n        self.__path = path\n        if encoding is None:\n            encoding = self.__detect_encoding(path)\n        self.__encoding = encoding\n\n        with open(self.__path, \'r\', encoding=self.__encoding) as f:\n            content = f.read()\n\n        result: dict[str, dict[str, str]] = {}\n\n        current_section = None\n        for line in content.splitlines():\n            line = line.strip()\n\n            # Comment\n            if line.startswith((\';\', \'#\')):\n                pass\n\n            # Set section\n            elif line.startswith(\'[\') and line.endswith(\']\'):\n                current_section = line.lstrip(\'[\').rstrip(\']\')\n\n            # Keys\n            elif \'=\' in line:\n                if current_section is None:\n                    raise SyntaxError(\'Section is not set\')\n\n                item = line.split(\'=\')\n\n                key = item[0]\n                value = item[1]\n\n                if value.startswith((\'"\', \'\\\'\')) and value.endswith((\'"\', \'\\\'\')):\n                    # translate_table = str.maketrans({\'\\\\n\': \'\\n\', \'\\\\t\': \'\\t\'})\n                    # value = value.strip(\'" \\\'\').translate(translate_table)\n                    value = value.strip(\'" \\\'\')\n                else:\n                    # \xe6\x96\x87\xe5\xad\x97\xe5\x88\x97\xe3\x81\x8c\xe3\x83\x80\xe3\x83\x96\xe3\x83\xab\xe3\x82\xaf\xe3\x82\xa9\xe3\x83\xbc\xe3\x83\x86\xe3\x83\xbc\xe3\x82\xb7\xe3\x83\xa7\xe3\x83\xb3\xe3\x81\xbe\xe3\x81\x9f\xe3\x81\xaf\xe3\x82\xaf\xe3\x82\xa9\xe3\x83\xbc\xe3\x83\x86\xe3\x83\xbc\xe3\x82\xb7\xe3\x83\xa7\xe3\x83\xb3\xe3\x81\xa7\xe5\x9b\xb2\xe3\x81\xbe\xe3\x82\x8c\xe3\x81\xa6\xe3\x81\x84\xe3\x81\xaa\xe3\x81\x8b\xe3\x81\xa3\xe3\x81\x9f\xe5\xa0\xb4\xe5\x90\x88\n                    raise SyntaxError(\n                        \'String must be enclosed in double quotation marks or quotation marks\')\n\n                result.setdefault(current_section, {})\n                result[current_section][key] = value\n\n        self.__data = result\n\n    def __getitem__(self, key: str):\n        table = self.__data[\'TABLE\']\n        value = table.get(key)\n        return \'Null\' if value is None else value\n\n    def get_info(self):\n        return self.__data[\'INFORMATION\']\n')
    __stickytape_write_module('libs/cmdparser.py', b"# -*- coding: utf-8 -*-\n\nfrom typing import (\n    Callable,\n    Optional,\n    Union,\n    Any,\n)\n\n\nclass Command:\n    class Arg:\n        def __init__(self, name: str, type_: type) -> None:\n            self.__name = name\n            self.__type: type = type_\n            self.__key: Callable[[Any], bool] = None\n\n        def get_type(self) -> type:\n            return self.__type\n\n        def get_name(self) -> type:\n            return self.__name\n\n        def set_arg(self, key: Callable[[Any], bool] = None) -> None:\n            self.__key = key\n\n        def __parse(self, arg: Callable[[Any], bool]) -> bool:\n            if self.__key is None:\n                return True\n            else:\n                return self.__key(arg)\n\n        def parse(self, data: Optional[Any] = None) -> bool:\n            if not isinstance(data, self.__type):\n                raise TypeError('Unsupported operand type for parse(): \\'%s\\'' % (\n                    self.__type.__name__))\n            elif isinstance(data, (str, int)):\n                return self.__parse(data)\n            elif data is None:\n                return None\n\n    # Struct\n\n    class Result:\n        def __init__(\n            self,\n            valid: Optional[bool] = None,\n            arg: Optional[Any] = None\n        ) -> None:\n            self.valid: Optional[bool] = valid\n            self.arg: Optional[Any] = arg\n\n    def __init__(self, **kwargs: Union[type, tuple[type, Callable[[Any], bool]]]) -> None:\n        self.__args: list[Command.Arg] = []\n\n        for arg in kwargs.items():\n            name: str = arg[0]\n            key: Callable[[Any], bool] = None\n\n            if isinstance(arg[1], tuple):\n                type_: type = arg[1][0]\n                key = arg[1][1]\n            else:\n                type_: type = arg[1]\n\n            arg_instance = Command.Arg(name, type_)\n            arg_instance.set_arg(key)\n\n            self.__args.append(arg_instance)\n\n    def clear(self) -> None:\n        self.__args.clear()\n\n    def parse(self, args: str, split_char: str = ' ') -> dict[str, 'Command.Result']:\n        splitted_args: list[str] = [char for char in args.split(split_char) if char != split_char]\n\n        if len(splitted_args) < self.__len__():\n            raise ValueError('Missing %d required positional argument' % (\n                self.__len__() - len(splitted_args)))\n        elif len(splitted_args) > self.__len__():\n            raise ValueError('Takes %d positional arguments but %d were given' % (\n                self.__len__(), len(splitted_args)))\n\n        result: dict[str, Command.Result] = {}\n\n        for text, arg in zip(splitted_args, self.__args):\n            valid: bool = False\n            arg_: Any = None\n\n            try:\n                valid = arg.parse(arg.get_type()(text))\n            except:\n                valid = False\n\n            try:\n                arg_ = arg.get_type()(text)\n            except:\n                pass\n\n            result[arg.get_name()] = Command.Result(valid, arg_)\n\n        return result\n\n    def input(self, __prompt: object = '', _exit: bool = False) -> dict[str, 'Command.Result']:\n        text = input(__prompt)\n        if _exit and text == '':\n            return None\n        return self.parse(text)\n\n    def __len__(self) -> int:\n        return len(self.__args)\n")
    __stickytape_write_module('libs/config.py', b'# -*- coding: utf-8 -*-\n\nimport os\nimport re\nfrom typing import Union, Any, Optional\n\n\nclass Config:\n    def __init__(self):\n        self.__path = None\n        self.__encoding = None\n        self.__data = None\n\n    def __detect_encoding(self, path: str):\n        # TODO \xe7\xa8\xae\xe9\xa1\x9e\xe3\x81\x8c\xe5\xb0\x91\xe3\x81\xaa\xe3\x81\x84\n        encodings = [\n            \'utf-8\',\n            \'cp932\',\n            \'utf-16\',\n            \'ascii\',\n        ]\n        with open(path, \'rb\') as f:\n            file_bin = f.read()\n        for encoding in encodings:\n            try:\n                file_bin.decode(encoding)\n            except UnicodeDecodeError:\n                pass\n            else:\n                return encoding\n        return None\n\n    # def __section_error(self, section_name: str):-\n    #     raise KeyError(\'Invalid or missing %s section in the file.\' % (section_name))\n\n    @property\n    def path(self):\n        return self.__path\n\n    @property\n    def loaded(self):\n        return self.__data is not None\n\n    def load(self, path: str, encoding: Optional[str] = None):\n        if not os.path.exists(path):\n            # raise FileNotFoundError(\'File \\\'%s\\\' not found\' % (path))\n            with open(path, \'w\') as f:\n                pass\n\n        self.__path = path\n        if encoding is None:\n            encoding = self.__detect_encoding(path)\n        self.__encoding = encoding\n\n        with open(self.__path, \'r\', encoding=self.__encoding) as f:\n            content = f.read()\n\n        result: dict[str, dict[str, str]] = {}\n\n        current_section = None\n        for line in content.splitlines():\n            line = line.strip()\n\n            if line.startswith(\'[\') and line.endswith(\']\'):\n                current_section = line.lstrip(\'[\').rstrip(\']\')\n\n            elif \'=\' in line:\n                if current_section is None:\n                    raise SyntaxError(\'Section is not set\')\n\n                item = line.split(\'=\')\n\n                key = item[0]\n                value = item[1]\n\n                type_ = None\n\n                if re.match(r\'^-?\\d+(?:\\.\\d+)?$\', value):\n                    type_ = float if \'.\' in value else int\n                elif type_ is None and value.lower() in (\'true\', \'false\'):\n                    type_ = bool\n\n                if value.startswith((\'"\', \'\\\'\')) and value.endswith((\'"\', \'\\\'\')):\n                    value = value.strip(\'" \\\'\')\n                elif type_ is not None:\n                    if type_ == bool:\n                        value = value.lower() == \'true\'\n                    else:\n                        value = type_(value)\n                else:\n                    raise TypeError(\n                        \'Unable to determine \\\'%s\\\' type\' % (value))\n\n                result.setdefault(current_section, {})\n                result[current_section][key] = value\n\n        self.__data = result\n\n    def to_ini_format(self):\n        result = \'\'\n        for section, keys in self.__data.items():\n            result += \'[%s]\\n\' % (section)\n            for key, value in keys.items():\n                if isinstance(value, str):\n                    value = \'"%s"\' % (value)\n                result += \'%s=%s\\n\' % (key, value)\n            result += \'\\n\'\n        result = result.rstrip(\'\\n\')\n        return result\n\n    def to_dict(self):\n        return self.__data\n\n    def save(self):\n        result = self.to_ini_format()\n        if self.__path is None:\n            raise Exception(\'Configuration is not loaded\')\n        with open(self.__path, \'w\', encoding=self.__encoding) as f:\n            f.write(result)\n\n    def get(\n        self,\n        section: str,\n        key: str,\n        default_value: Optional[Union[str, int, float, bool]] = None\n    ):\n        keys = self.__data.get(section)\n        if keys is None:\n            if default_value is not None:\n                self.__data.setdefault(section, {key: default_value})\n            return default_value\n        value = keys.get(key)\n        if value is None:\n            if default_value is not None:\n                self.__data[section].setdefault(key, default_value)\n            return default_value\n        return value\n\n    def setdefault(self, key: Any, value: Optional[Any] = None):\n        self.__data.setdefault(key, value)\n\n    def __getitem__(self, key: str):\n        return self.__data[key]\n\n    def __setitem__(self, key: str, value: Union[str, int, float, bool]):\n        self.__data[key] = value\n\n    def __contains__(self, section: str):\n        return section in self.__data\n\n    def __len__(self):\n        return len(self.__data)\n\n    def __len__(self):\n        return len(self.__data)\n')
    __stickytape_write_module('tabs/Menu.py', b"# -*- coding: utf-8 -*-\n\nclass Menu:\n    def __init__(\n        self,\n        *,\n        keys: str,\n        title: str,\n        description: str,\n    ):\n        self.keys = keys\n        self.title = title\n        self.description = description\n\n    def run(self, **kwargs):\n        raise Exception('Class \\'%s\\' has no run()' % (self.__class__.__name__))\n")
    __stickytape_write_module('libs/language_codes.py', b"# -*- coding: utf-8 -*-\n\n# Taken from https://github.com/Nerdtrix/language-list/blob/main/language-list-json.json\nLANGUAGE_CODES = {\n    'af_NA': {\n        'name': 'Afrikaans (Namibia)',\n        'charset': 'UTF-8'\n    },\n    'af_ZA': {\n        'name': 'Afrikaans (South Africa)',\n        'charset': 'UTF-8'\n    },\n    'af': {\n        'name': 'Afrikaans',\n        'charset': 'UTF-8'\n    },\n    'ak_GH': {\n        'name': 'Akan (Ghana)',\n        'charset': 'UTF-8'\n    },\n    'ak': {\n        'name': 'Akan',\n        'charset': 'UTF-8'\n    },\n    'sq_AL': {\n        'name': 'Albanian (Albania)',\n        'charset': 'UTF-8'\n    },\n    'sq': {\n        'name': 'Albanian',\n        'charset': 'UTF-8'\n    },\n    'am_ET': {\n        'name': 'Amharic (Ethiopia)',\n        'charset': 'UTF-8'\n    },\n    'am': {\n        'name': 'Amharic',\n        'charset': 'UTF-8'\n    },\n    'ar_DZ': {\n        'name': 'Arabic (Algeria)',\n        'charset': 'UTF-8'\n    },\n    'ar_BH': {\n        'name': 'Arabic (Bahrain)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_EG': {\n        'name': 'Arabic (Egypt)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_IQ': {\n        'name': 'Arabic (Iraq)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_JO': {\n        'name': 'Arabic (Jordan)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_KW': {\n        'name': 'Arabic (Kuwait)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_LB': {\n        'name': 'Arabic (Lebanon)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_LY': {\n        'name': 'Arabic (Libya)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_MA': {\n        'name': 'Arabic (Morocco)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_OM': {\n        'name': 'Arabic (Oman)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_QA': {\n        'name': 'Arabic (Qatar)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_SA': {\n        'name': 'Arabic (Saudi Arabia)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_SD': {\n        'name': 'Arabic (Sudan)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_SY': {\n        'name': 'Arabic (Syria)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_TN': {\n        'name': 'Arabic (Tunisia)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_AE': {\n        'name': 'Arabic (United Arab Emirates)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar_YE': {\n        'name': 'Arabic (Yemen)',\n        'charset': 'ISO-8859-6'\n    },\n    'ar': {\n        'name': 'Arabic',\n        'charset': 'ISO-8859-6'\n    },\n    'hy_AM': {\n        'name': 'Armenian (Armenia)',\n        'charset': 'ARMSCII-8'\n    },\n    'hy': {\n        'name': 'Armenian',\n        'charset': 'ARMSCII-8'\n    },\n    'as_IN': {\n        'name': 'Assamese (India)',\n        'charset': 'UTF-8'\n    },\n    'as': {\n        'name': 'Assamese',\n        'charset': 'UTF-8'\n    },\n    'asa_TZ': {\n        'name': 'Asu (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'asa': {\n        'name': 'Asu',\n        'charset': 'UTF-8'\n    },\n    'az_Cyrl': {\n        'name': 'Azerbaijani (Cyrillic, Azerbaijan)',\n        'charset': 'UTF-8'\n    },\n    'az_Cyrl_AZ': {\n        'name': 'Azerbaijani (Cyrillic, Azerbaijan)',\n        'charset': 'UTF-8'\n    },\n    'az_Latn': {\n        'name': 'Azerbaijani (Latin)',\n        'charset': 'UTF-8'\n    },\n    'az_Latn_AZ': {\n        'name': 'Azerbaijani (Latin, Azerbaijan)',\n        'charset': 'UTF-8'\n    },\n    'az': {\n        'name': 'Azerbaijani',\n        'charset': 'UTF-8'\n    },\n    'bm_ML': {\n        'name': 'Bambara (Mali)',\n        'charset': 'iso-8859-1'\n    },\n    'bm': {\n        'name': 'Bambara',\n        'charset': 'iso-8859-1'\n    },\n    'eu_ES': {\n        'name': 'Basque (Spain)',\n        'charset': 'ISO-8859-1'\n    },\n    'eu': {\n        'name': 'Basque',\n        'charset': 'ISO-8859-1'\n    },\n    'be_BY': {\n        'name': 'Belarusian (Belarus)',\n        'charset': 'UTF-8'\n    },\n    'be': {\n        'name': 'Belarusian',\n        'charset': 'UTF-8'\n    },\n    'bem_ZM': {\n        'name': 'Bemba (Zambia)',\n        'charset': 'UTF-8'\n    },\n    'bem': {\n        'name': 'Bemba',\n        'charset': 'UTF-8'\n    },\n    'bez_TZ': {\n        'name': 'Bena (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'bez': {\n        'name': 'Bena',\n        'charset': 'UTF-8'\n    },\n    'bn_BD': {\n        'name': 'Bengali (Bangladesh)',\n        'charset': 'UTF-8'\n    },\n    'bn_IN': {\n        'name': 'Bengali (India)',\n        'charset': 'UTF-8'\n    },\n    'bn': {\n        'name': 'Bengali',\n        'charset': 'UTF-8'\n    },\n    'bs_BA': {\n        'name': 'Bosnian (Bosnia and Herzegovina)',\n        'charset': 'UTF-8'\n    },\n    'bs': {\n        'name': 'Bosnian',\n        'charset': 'UTF-8'\n    },\n    'bg_BG': {\n        'name': 'Bulgarian (Bulgaria)',\n        'charset': 'ISO-8859-2'\n    },\n    'bg': {\n        'name': 'Bulgarian',\n        'charset': 'ISO-8859-2'\n    },\n    'my_MM': {\n        'name': 'Burmese (Myanmar [Burma])',\n        'charset': 'UTF-8'\n    },\n    'my': {\n        'name': 'Burmese',\n        'charset': 'UTF-8'\n    },\n    'yue_Hant_HK': {\n        'name': 'Cantonese (Traditional, Hong Kong SAR China)',\n        'charset': 'UTF-8'\n    },\n    'ca_ES': {\n        'name': 'Catalan (Spain)',\n        'charset': 'ISO-8859-15'\n    },\n    'ca': {\n        'name': 'Catalan',\n        'charset': 'ISO-8859-15'\n    },\n    'tzm_Latn': {\n        'name': 'Central Morocco Tamazight (Latin)',\n        'charset': 'ISO-8859-1'\n    },\n    'tzm_Latn_MA': {\n        'name': 'Central Morocco Tamazight (Latin, Morocco)',\n        'charset': 'ISO-8859-1'\n    },\n    'tzm': {\n        'name': 'Central Morocco Tamazight',\n        'charset': 'ISO-8859-1'\n    },\n    'chr_US': {\n        'name': 'Cherokee (United States)',\n        'charset': 'U+13A0'\n    },\n    'chr': {\n        'name': 'Cherokee',\n        'charset': 'U+13A0'\n    },\n    'cgg_UG': {\n        'name': 'Chiga (Uganda)',\n        'charset': 'ISO-8859-1'\n    },\n    'cgg': {\n        'name': 'Chiga',\n        'charset': 'ISO-8859-1'\n    },\n    'zh_Hans': {\n        'name': 'Chinese (Simplified Han)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hans_CN': {\n        'name': 'Chinese (Simplified Han, China)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hans_HK': {\n        'name': 'Chinese (Simplified Han, Hong Kong SAR China)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hans_MO': {\n        'name': 'Chinese (Simplified Han, Macau SAR China)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hans_SG': {\n        'name': 'Chinese (Simplified Han, Singapore)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hant': {\n        'name': 'Chinese (Traditional Han)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hant_HK': {\n        'name': 'Chinese (Traditional Han, Hong Kong SAR China)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hant_MO': {\n        'name': 'Chinese (Traditional Han, Macau SAR China)',\n        'charset': 'UTF-8'\n    },\n    'zh_Hant_TW': {\n        'name': 'Chinese (Traditional Han, Taiwan)',\n        'charset': 'UTF-8'\n    },\n    'zh': {\n        'name': 'Chinese',\n        'charset': 'UTF-8'\n    },\n    'kw_GB': {\n        'name': 'Cornish (United Kingdom)',\n        'charset': 'ISO-8859-1'\n    },\n    'kw': {\n        'name': 'Cornish',\n        'charset': 'ISO-8859-1'\n    },\n    'hr_HR': {\n        'name': 'Croatian (Croatia)',\n        'charset': 'ISO-8859-2'\n    },\n    'hr': {\n        'name': 'Croatian',\n        'charset': 'ISO-8859-2'\n    },\n    'cs_CZ': {\n        'name': 'Czech (Czech Republic)',\n        'charset': 'ISO-8859-2'\n    },\n    'cs': {\n        'name': 'Czech',\n        'charset': 'ISO-8859-2'\n    },\n    'da_DK': {\n        'name': 'Danish (Denmark)',\n        'charset': 'ISO-8859-1'\n    },\n    'da': {\n        'name': 'Danish',\n        'charset': 'ISO-8859-1'\n    },\n    'nl_BE': {\n        'name': 'Dutch (Belgium)',\n        'charset': 'ISO-8859-15'\n    },\n    'nl_NL': {\n        'name': 'Dutch (Netherlands)',\n        'charset': 'ISO-8859-15'\n    },\n    'nl': {\n        'name': 'Dutch',\n        'charset': 'ISO-8859-15'\n    },\n    'ebu_KE': {\n        'name': 'Embu (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'ebu': {\n        'name': 'Embu',\n        'charset': 'UTF-8'\n    },\n    'en_AS': {\n        'name': 'English (American Samoa)',\n        'charset': 'UTF-8'\n    },\n    'en_AU': {\n        'name': 'English (Australia)',\n        'charset': 'UTF-8'\n    },\n    'en_BE': {\n        'name': 'English (Belgium)',\n        'charset': 'UTF-8'\n    },\n    'en_BZ': {\n        'name': 'English (Belize)',\n        'charset': 'UTF-8'\n    },\n    'en_BW': {\n        'name': 'English (Botswana)',\n        'charset': 'UTF-8'\n    },\n    'en_CA': {\n        'name': 'English (Canada)',\n        'charset': 'UTF-8'\n    },\n    'en_GU': {\n        'name': 'English (Guam)',\n        'charset': 'UTF-8'\n    },\n    'en_HK': {\n        'name': 'English (Hong Kong SAR China)',\n        'charset': 'UTF-8'\n    },\n    'en_IN': {\n        'name': 'English (India)',\n        'charset': 'UTF-8'\n    },\n    'en_IE': {\n        'name': 'English (Ireland)',\n        'charset': 'UTF-8'\n    },\n    'en_IL': {\n        'name': 'English (Israel)',\n        'charset': 'UTF-8'\n    },\n    'en_JM': {\n        'name': 'English (Jamaica)',\n        'charset': 'UTF-8'\n    },\n    'en_MT': {\n        'name': 'English (Malta)',\n        'charset': 'UTF-8'\n    },\n    'en_MH': {\n        'name': 'English (Marshall Islands)',\n        'charset': 'UTF-8'\n    },\n    'en_MU': {\n        'name': 'English (Mauritius)',\n        'charset': 'UTF-8'\n    },\n    'en_NA': {\n        'name': 'English (Namibia)',\n        'charset': 'UTF-8'\n    },\n    'en_NZ': {\n        'name': 'English (New Zealand)',\n        'charset': 'UTF-8'\n    },\n    'en_MP': {\n        'name': 'English (Northern Mariana Islands)',\n        'charset': 'UTF-8'\n    },\n    'en_PK': {\n        'name': 'English (Pakistan)',\n        'charset': 'UTF-8'\n    },\n    'en_PH': {\n        'name': 'English (Philippines)',\n        'charset': 'UTF-8'\n    },\n    'en_SG': {\n        'name': 'English (Singapore)',\n        'charset': 'UTF-8'\n    },\n    'en_ZA': {\n        'name': 'English (South Africa)',\n        'charset': 'UTF-8'\n    },\n    'en_TT': {\n        'name': 'English (Trinidad and Tobago)',\n        'charset': 'UTF-8'\n    },\n    'en_UM': {\n        'name': 'English (U.S. Minor Outlying Islands)',\n        'charset': 'UTF-8'\n    },\n    'en_VI': {\n        'name': 'English (U.S. Virgin Islands)',\n        'charset': 'UTF-8'\n    },\n    'en_GB': {\n        'name': 'English (United Kingdom)',\n        'charset': 'UTF-8'\n    },\n    'en_US': {\n        'name': 'English (United States)',\n        'charset': 'UTF-8'\n    },\n    'en_ZW': {\n        'name': 'English (Zimbabwe)',\n        'charset': 'UTF-8'\n    },\n    'en': {\n        'name': 'English',\n        'charset': 'UTF-8'\n    },\n    'eo': {\n        'name': 'Esperanto',\n        'charset': 'UTF-8'\n    },\n    'et_EE': {\n        'name': 'Estonian (Estonia)',\n        'charset': 'ISO-8859-1'\n    },\n    'et': {\n        'name': 'Estonian',\n        'charset': 'ISO-8859-1'\n    },\n    'ee_GH': {\n        'name': 'Ewe (Ghana)',\n        'charset': 'ISO-8859-1'\n    },\n    'ee_TG': {\n        'name': 'Ewe (Togo)',\n        'charset': 'ISO-8859-1'\n    },\n    'ee': {\n        'name': 'Ewe',\n        'charset': 'ISO-8859-1'\n    },\n    'fo_FO': {\n        'name': 'Faroese (Faroe Islands)',\n        'charset': 'UTF-8'\n    },\n    'fo': {\n        'name': 'Faroese',\n        'charset': 'UTF-8'\n    },\n    'fil_PH': {\n        'name': 'Filipino (Philippines)',\n        'charset': 'UTF-8'\n    },\n    'fil': {\n        'name': 'Filipino',\n        'charset': 'UTF-8'\n    },\n    'fi_FI': {\n        'name': 'Finnish (Finland)',\n        'charset': 'UTF-8'\n    },\n    'fi': {\n        'name': 'Finnish',\n        'charset': 'UTF-8'\n    },\n    'fr_BE': {\n        'name': 'French (Belgium)',\n        'charset': 'UTF-8'\n    },\n    'fr_BJ': {\n        'name': 'French (Benin)',\n        'charset': 'UTF-8'\n    },\n    'fr_BF': {\n        'name': 'French (Burkina Faso)',\n        'charset': 'UTF-8'\n    },\n    'fr_BI': {\n        'name': 'French (Burundi)',\n        'charset': 'UTF-8'\n    },\n    'fr_CM': {\n        'name': 'French (Cameroon)',\n        'charset': 'UTF-8'\n    },\n    'fr_CA': {\n        'name': 'French (Canada)',\n        'charset': 'UTF-8'\n    },\n    'fr_CF': {\n        'name': 'French (Central African Republic)',\n        'charset': 'UTF-8'\n    },\n    'fr_TD': {\n        'name': 'French (Chad)',\n        'charset': 'UTF-8'\n    },\n    'fr_KM': {\n        'name': 'French (Comoros)',\n        'charset': 'UTF-8'\n    },\n    'fr_CG': {\n        'name': 'French (Congo - Brazzaville)',\n        'charset': 'UTF-8'\n    },\n    'fr_CD': {\n        'name': 'French (Congo - Kinshasa)',\n        'charset': 'UTF-8'\n    },\n    'fr_CI': {\n        'name': 'French (C\xc3\xb4te d\xe2\x80\x99Ivoire)',\n        'charset': 'UTF-8'\n    },\n    'fr_DJ': {\n        'name': 'French (Djibouti)',\n        'charset': 'UTF-8'\n    },\n    'fr_GQ': {\n        'name': 'French (Equatorial Guinea)',\n        'charset': 'UTF-8'\n    },\n    'fr_FR': {\n        'name': 'French (France)',\n        'charset': 'UTF-8'\n    },\n    'fr_GA': {\n        'name': 'French (Gabon)',\n        'charset': 'UTF-8'\n    },\n    'fr_GP': {\n        'name': 'French (Guadeloupe)',\n        'charset': 'UTF-8'\n    },\n    'fr_GN': {\n        'name': 'French (Guinea)',\n        'charset': 'UTF-8'\n    },\n    'fr_LU': {\n        'name': 'French (Luxembourg)',\n        'charset': 'UTF-8'\n    },\n    'fr_MG': {\n        'name': 'French (Madagascar)',\n        'charset': 'UTF-8'\n    },\n    'fr_ML': {\n        'name': 'French (Mali)',\n        'charset': 'UTF-8'\n    },\n    'fr_MQ': {\n        'name': 'French (Martinique)',\n        'charset': 'UTF-8'\n    },\n    'fr_MC': {\n        'name': 'French (Monaco)',\n        'charset': 'UTF-8'\n    },\n    'fr_NE': {\n        'name': 'French (Niger)',\n        'charset': 'UTF-8'\n    },\n    'fr_RW': {\n        'name': 'French (Rwanda)',\n        'charset': 'UTF-8'\n    },\n    'fr_RE': {\n        'name': 'French (R\xc3\xa9union)',\n        'charset': 'UTF-8'\n    },\n    'fr_BL': {\n        'name': 'French (Saint Barth\xc3\xa9lemy)',\n        'charset': 'UTF-8'\n    },\n    'fr_MF': {\n        'name': 'French (Saint Martin)',\n        'charset': 'UTF-8'\n    },\n    'fr_SN': {\n        'name': 'French (Senegal)',\n        'charset': 'UTF-8'\n    },\n    'fr_CH': {\n        'name': 'French (Switzerland)',\n        'charset': 'UTF-8'\n    },\n    'fr_TG': {\n        'name': 'French (Togo)',\n        'charset': 'UTF-8'\n    },\n    'fr': {\n        'name': 'French',\n        'charset': 'UTF-8'\n    },\n    'ff_SN': {\n        'name': 'Fulah (Senegal)',\n        'charset': 'UTF-8'\n    },\n    'ff': {\n        'name': 'Fulah',\n        'charset': 'UTF-8'\n    },\n    'gl_ES': {\n        'name': 'Galician (Spain)',\n        'charset': 'ISO-8859-1'\n    },\n    'gl': {\n        'name': 'Galician',\n        'charset': 'ISO-8859-1'\n    },\n    'lg_UG': {\n        'name': 'Ganda (Uganda)',\n        'charset': 'UTF-8'\n    },\n    'lg': {\n        'name': 'Ganda',\n        'charset': 'UTF-8'\n    },\n    'ka_GE': {\n        'name': 'Georgian (Georgia)',\n        'charset': 'UTF-8'\n    },\n    'ka': {\n        'name': 'Georgian',\n        'charset': 'UTF-8'\n    },\n    'de_AT': {\n        'name': 'German (Austria)',\n        'charset': 'ISO-8859-1'\n    },\n    'de_BE': {\n        'name': 'German (Belgium)',\n        'charset': 'ISO-8859-1'\n    },\n    'de_DE': {\n        'name': 'German (Germany)',\n        'charset': 'ISO-8859-1'\n    },\n    'de_LI': {\n        'name': 'German (Liechtenstein)',\n        'charset': 'ISO-8859-1'\n    },\n    'de_LU': {\n        'name': 'German (Luxembourg)',\n        'charset': 'ISO-8859-1'\n    },\n    'de_CH': {\n        'name': 'German (Switzerland)',\n        'charset': 'ISO-8859-1'\n    },\n    'de': {\n        'name': 'German',\n        'charset': 'ISO-8859-1'\n    },\n    'el_CY': {\n        'name': 'Greek (Cyprus)',\n        'charset': 'UTF-8'\n    },\n    'el_GR': {\n        'name': 'Greek (Greece)',\n        'charset': 'UTF-8'\n    },\n    'el': {\n        'name': 'Greek',\n        'charset': 'UTF-8'\n    },\n    'gu_IN': {\n        'name': 'Gujarati (India)',\n        'charset': 'UTF-8'\n    },\n    'gu': {\n        'name': 'Gujarati',\n        'charset': 'UTF-8'\n    },\n    'guz_KE': {\n        'name': 'Gusii (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'guz': {\n        'name': 'Gusii',\n        'charset': 'UTF-8'\n    },\n    'ha_Latn': {\n        'name': 'Hausa (Latin)',\n        'charset': 'UTF-8'\n    },\n    'ha_Latn_GH': {\n        'name': 'Hausa (Latin, Ghana)',\n        'charset': 'UTF-8'\n    },\n    'ha_Latn_NE': {\n        'name': 'Hausa (Latin, Niger)',\n        'charset': 'UTF-8'\n    },\n    'ha_Latn_NG': {\n        'name': 'Hausa (Latin, Nigeria)',\n        'charset': 'UTF-8'\n    },\n    'ha': {\n        'name': 'Hausa',\n        'charset': 'UTF-8'\n    },\n    'haw_US': {\n        'name': 'Hawaiian (United States)',\n        'charset': 'UTF-8'\n    },\n    'haw': {\n        'name': 'Hawaiian',\n        'charset': 'UTF-8'\n    },\n    'he_IL': {\n        'name': 'Hebrew (Israel)',\n        'charset': 'ISO-8859-8'\n    },\n    'he': {\n        'name': 'Hebrew',\n        'charset': 'ISO-8859-8'\n    },\n    'hi_IN': {\n        'name': 'Hindi (India)',\n        'charset': 'UTF-8'\n    },\n    'hi': {\n        'name': 'Hindi',\n        'charset': 'UTF-8'\n    },\n    'hu_HU': {\n        'name': 'Hungarian (Hungary)',\n        'charset': 'ISO-8859-2'\n    },\n    'hu': {\n        'name': 'Hungarian',\n        'charset': 'ISO-8859-2'\n    },\n    'is_IS': {\n        'name': 'Icelandic (Iceland)',\n        'charset': 'ISO-8859-1'\n    },\n    'is': {\n        'name': 'Icelandic',\n        'charset': 'ISO-8859-1'\n    },\n    'ig_NG': {\n        'name': 'Igbo (Nigeria)',\n        'charset': 'UTF-8'\n    },\n    'ig': {\n        'name': 'Igbo',\n        'charset': 'UTF-8'\n    },\n    'id_ID': {\n        'name': 'Indonesian (Indonesia)',\n        'charset': 'ISO-8859-1'\n    },\n    'id': {\n        'name': 'Indonesian',\n        'charset': 'ISO-8859-1'\n    },\n    'ga_IE': {\n        'name': 'Irish (Ireland)',\n        'charset': 'ISO-8859-1'\n    },\n    'ga': {\n        'name': 'Irish',\n        'charset': 'ISO-8859-1'\n    },\n    'it_IT': {\n        'name': 'Italian (Italy)',\n        'charset': 'ISO-8859-1'\n    },\n    'it_CH': {\n        'name': 'Italian (Switzerland)',\n        'charset': 'ISO-8859-1'\n    },\n    'it': {\n        'name': 'Italian',\n        'charset': 'ISO-8859-1'\n    },\n    'ja_JP': {\n        'name': 'Japanese (Japan)',\n        'charset': 'UTF-8'\n    },\n    'ja': {\n        'name': 'Japanese',\n        'charset': 'UTF-8'\n    },\n    'kea_CV': {\n        'name': 'Kabuverdianu (Cape Verde)',\n        'charset': 'UTF-8'\n    },\n    'kea': {\n        'name': 'Kabuverdianu',\n        'charset': 'UTF-8'\n    },\n    'kab_DZ': {\n        'name': 'Kabyle (Algeria)',\n        'charset': 'UTF-8'\n    },\n    'kab': {\n        'name': 'Kabyle',\n        'charset': 'UTF-8'\n    },\n    'kl_GL': {\n        'name': 'Kalaallisut (Greenland)',\n        'charset': 'ISO-8859-1'\n    },\n    'kl': {\n        'name': 'Kalaallisut',\n        'charset': 'ISO-8859-1'\n    },\n    'kln_KE': {\n        'name': 'Kalenjin (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'kln': {\n        'name': 'Kalenjin',\n        'charset': 'UTF-8'\n    },\n    'kam_KE': {\n        'name': 'Kamba (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'kam': {\n        'name': 'Kamba',\n        'charset': 'UTF-8'\n    },\n    'kn_IN': {\n        'name': 'Kannada (India)',\n        'charset': 'UTF-8'\n    },\n    'kn': {\n        'name': 'Kannada',\n        'charset': 'UTF-8'\n    },\n    'kk_Cyrl': {\n        'name': 'Kazakh (Cyrillic)',\n        'charset': 'UTF-8'\n    },\n    'kk_Cyrl_KZ': {\n        'name': 'Kazakh (Cyrillic, Kazakhstan)',\n        'charset': 'UTF-8'\n    },\n    'kk': {\n        'name': 'Kazakh',\n        'charset': 'UTF-8'\n    },\n    'km_KH': {\n        'name': 'Khmer (Cambodia)',\n        'charset': 'UTF-8'\n    },\n    'km': {\n        'name': 'Khmer',\n        'charset': 'UTF-8'\n    },\n    'ki_KE': {\n        'name': 'Kikuyu (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'ki': {\n        'name': 'Kikuyu',\n        'charset': 'UTF-8'\n    },\n    'rw_RW': {\n        'name': 'Kinyarwanda (Rwanda)',\n        'charset': 'UTF-8'\n    },\n    'rw': {\n        'name': 'Kinyarwanda',\n        'charset': 'UTF-8'\n    },\n    'kok_IN': {\n        'name': 'Konkani (India)',\n        'charset': 'UTF-8'\n    },\n    'kok': {\n        'name': 'Konkani',\n        'charset': 'UTF-8'\n    },\n    'ko_KR': {\n        'name': 'Korean (South Korea)',\n        'charset': 'UTF-8'\n    },\n    'ko': {\n        'name': 'Korean',\n        'charset': 'UTF-8'\n    },\n    'khq_ML': {\n        'name': 'Koyra Chiini (Mali)',\n        'charset': 'UTF-8'\n    },\n    'khq': {\n        'name': 'Koyra Chiini',\n        'charset': 'UTF-8'\n    },\n    'ses_ML': {\n        'name': 'Koyraboro Senni (Mali)',\n        'charset': 'UTF-8'\n    },\n    'ses': {\n        'name': 'Koyraboro Senni',\n        'charset': 'UTF-8'\n    },\n    'lag_TZ': {\n        'name': 'Langi (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'lag': {\n        'name': 'Langi',\n        'charset': 'UTF-8'\n    },\n    'lv_LV': {\n        'name': 'Latvian (Latvia)',\n        'charset': 'UTF-8'\n    },\n    'lv': {\n        'name': 'Latvian',\n        'charset': 'UTF-8'\n    },\n    'lt_LT': {\n        'name': 'Lithuanian (Lithuania)',\n        'charset': 'ISO-8859-13'\n    },\n    'lt': {\n        'name': 'Lithuanian',\n        'charset': 'ISO-8859-13'\n    },\n    'luo_KE': {\n        'name': 'Luo (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'luo': {\n        'name': 'Luo',\n        'charset': 'UTF-8'\n    },\n    'luy_KE': {\n        'name': 'Luyia (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'luy': {\n        'name': 'Luyia',\n        'charset': 'UTF-8'\n    },\n    'mk_MK': {\n        'name': 'Macedonian (Macedonia)',\n        'charset': 'ISO-8859-5'\n    },\n    'mk': {\n        'name': 'Macedonian',\n        'charset': 'ISO-8859-5'\n    },\n    'jmc_TZ': {\n        'name': 'Machame (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'jmc': {\n        'name': 'Machame',\n        'charset': 'UTF-8'\n    },\n    'kde_TZ': {\n        'name': 'Makonde (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'kde': {\n        'name': 'Makonde',\n        'charset': 'UTF-8'\n    },\n    'mg_MG': {\n        'name': 'Malagasy (Madagascar)',\n        'charset': 'ISO-8859-15'\n    },\n    'mg': {\n        'name': 'Malagasy',\n        'charset': 'ISO-8859-15'\n    },\n    'ms_BN': {\n        'name': 'Malay (Brunei)',\n        'charset': 'UTF-8'\n    },\n    'ms_MY': {\n        'name': 'Malay (Malaysia)',\n        'charset': 'UTF-8'\n    },\n    'ms': {\n        'name': 'Malay',\n        'charset': 'UTF-8'\n    },\n    'ml_IN': {\n        'name': 'Malayalam (India)',\n        'charset': 'UTF-8'\n    },\n    'ml': {\n        'name': 'Malayalam',\n        'charset': 'UTF-8'\n    },\n    'mt_MT': {\n        'name': 'Maltese (Malta)',\n        'charset': 'UTF-8'\n    },\n    'mt': {\n        'name': 'Maltese',\n        'charset': 'ISO-8859-3'\n    },\n    'gv_GB': {\n        'name': 'Manx (United Kingdom)',\n        'charset': 'ISO-8859-1'\n    },\n    'gv': {\n        'name': 'Manx',\n        'charset': 'ISO-8859-1'\n    },\n    'mr_IN': {\n        'name': 'Marathi (India)',\n        'charset': 'UTF-8'\n    },\n    'mr': {\n        'name': 'Marathi',\n        'charset': 'UTF-8'\n    },\n    'mas_KE': {\n        'name': 'Masai (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'mas_TZ': {\n        'name': 'Masai (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'mas': {\n        'name': 'Masai',\n        'charset': 'UTF-8'\n    },\n    'mer_KE': {\n        'name': 'Meru (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'mer': {\n        'name': 'Meru',\n        'charset': 'UTF-8'\n    },\n    'mfe_MU': {\n        'name': 'Morisyen (Mauritius)',\n        'charset': 'UTF-8'\n    },\n    'mfe': {\n        'name': 'Morisyen',\n        'charset': 'UTF-8'\n    },\n    'naq_NA': {\n        'name': 'Nama (Namibia)',\n        'charset': 'UTF-8'\n    },\n    'naq': {\n        'name': 'Nama',\n        'charset': 'UTF-8'\n    },\n    'ne_IN': {\n        'name': 'Nepali (India)',\n        'charset': 'UTF-8'\n    },\n    'ne_NP': {\n        'name': 'Nepali (Nepal)',\n        'charset': 'UTF-8'\n    },\n    'ne': {\n        'name': 'Nepali',\n        'charset': 'UTF-8'\n    },\n    'nd_ZW': {\n        'name': 'North Ndebele (Zimbabwe)',\n        'charset': 'UTF-8'\n    },\n    'nd': {\n        'name': 'North Ndebele',\n        'charset': 'UTF-8'\n    },\n    'nb_NO': {\n        'name': 'Norwegian Bokm\xc3\xa5l (Norway)',\n        'charset': 'ISO-8859-1'\n    },\n    'nb': {\n        'name': 'Norwegian Bokm\xc3\xa5l',\n        'charset': 'ISO-8859-1'\n    },\n    'nn_NO': {\n        'name': 'Norwegian Nynorsk (Norway)',\n        'charset': 'ISO-8859-1'\n    },\n    'nn': {\n        'name': 'Norwegian Nynorsk',\n        'charset': 'ISO-8859-1'\n    },\n    'nyn_UG': {\n        'name': 'Nyankole (Uganda)',\n        'charset': 'UTF-8'\n    },\n    'nyn': {\n        'name': 'Nyankole',\n        'charset': 'UTF-8'\n    },\n    'or_IN': {\n        'name': 'Oriya (India)',\n        'charset': 'UTF-8'\n    },\n    'or': {\n        'name': 'Oriya',\n        'charset': 'UTF-8'\n    },\n    'om_ET': {\n        'name': 'Oromo (Ethiopia)',\n        'charset': 'UTF-8'\n    },\n    'om_KE': {\n        'name': 'Oromo (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'om': {\n        'name': 'Oromo',\n        'charset': 'UTF-8'\n    },\n    'ps_AF': {\n        'name': 'Pashto (Afghanistan)',\n        'charset': 'UTF-8'\n    },\n    'ps': {\n        'name': 'Pashto',\n        'charset': 'UTF-8'\n    },\n    'fa_AF': {\n        'name': 'Persian (Afghanistan)',\n        'charset': 'UTF-8'\n    },\n    'fa_IR': {\n        'name': 'Persian (Iran)',\n        'charset': 'UTF-8'\n    },\n    'fa': {\n        'name': 'Persian',\n        'charset': 'UTF-8'\n    },\n    'pl_PL': {\n        'name': 'Polish (Poland)',\n        'charset': 'ISO-8859-2'\n    },\n    'pl': {\n        'name': 'Polish',\n        'charset': 'ISO-8859-2'\n    },\n    'pt_BR': {\n        'name': 'Portuguese (Brazil)',\n        'charset': 'ISO-8859-1'\n    },\n    'pt_GW': {\n        'name': 'Portuguese (Guinea-Bissau)',\n        'charset': 'ISO-8859-1'\n    },\n    'pt_MZ': {\n        'name': 'Portuguese (Mozambique)',\n        'charset': 'ISO-8859-1'\n    },\n    'pt_PT': {\n        'name': 'Portuguese (Portugal)',\n        'charset': 'ISO-8859-1'\n    },\n    'pt': {\n        'name': 'Portuguese',\n        'charset': 'ISO-8859-1'\n    },\n    'pa_Arab': {\n        'name': 'Punjabi (Arabic)',\n        'charset': 'UTF-8'\n    },\n    'pa_Arab_PK': {\n        'name': 'Punjabi (Arabic, Pakistan)',\n        'charset': 'UTF-8'\n    },\n    'pa_Guru': {\n        'name': 'Punjabi (Gurmukhi)',\n        'charset': 'UTF-8'\n    },\n    'pa_Guru_IN': {\n        'name': 'Punjabi (Gurmukhi, India)',\n        'charset': 'UTF-8'\n    },\n    'pa': {\n        'name': 'Punjabi',\n        'charset': 'UTF-8'\n    },\n    'ro_MD': {\n        'name': 'Romanian (Moldova)',\n        'charset': 'UTF-8'\n    },\n    'ro_RO': {\n        'name': 'Romanian (Romania)',\n        'charset': 'UTF-8'\n    },\n    'ro': {\n        'name': 'Romanian',\n        'charset': 'UTF-8'\n    },\n    'rm_CH': {\n        'name': 'Romansh (Switzerland)',\n        'charset': 'UTF-8'\n    },\n    'rm': {\n        'name': 'Romansh',\n        'charset': 'UTF-8'\n    },\n    'rof_TZ': {\n        'name': 'Rombo (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'rof': {\n        'name': 'Rombo',\n        'charset': 'UTF-8'\n    },\n    'ru_MD': {\n        'name': 'Russian (Moldova)',\n        'charset': 'UTF-8'\n    },\n    'ru_RU': {\n        'name': 'Russian (Russia)',\n        'charset': 'UTF-8'\n    },\n    'ru_UA': {\n        'name': 'Russian (Ukraine)',\n        'charset': 'UTF-8'\n    },\n    'ru': {\n        'name': 'Russian',\n        'charset': 'UTF-8'\n    },\n    'rwk_TZ': {\n        'name': 'Rwa (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'rwk': {\n        'name': 'Rwa',\n        'charset': 'UTF-8'\n    },\n    'saq_KE': {\n        'name': 'Samburu (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'saq': {\n        'name': 'Samburu',\n        'charset': 'UTF-8'\n    },\n    'sg_CF': {\n        'name': 'Sango (Central African Republic)',\n        'charset': 'UTF-8'\n    },\n    'sg': {\n        'name': 'Sango',\n        'charset': 'UTF-8'\n    },\n    'seh_MZ': {\n        'name': 'Sena (Mozambique)',\n        'charset': 'UTF-8'\n    },\n    'seh': {\n        'name': 'Sena',\n        'charset': 'UTF-8'\n    },\n    'sr_Cyrl': {\n        'name': 'Serbian (Cyrillic)',\n        'charset': 'UTF-8'\n    },\n    'sr_Cyrl_BA': {\n        'name': 'Serbian (Cyrillic, Bosnia and Herzegovina)',\n        'charset': 'UTF-8'\n    },\n    'sr_Cyrl_ME': {\n        'name': 'Serbian (Cyrillic, Montenegro)',\n        'charset': 'UTF-8'\n    },\n    'sr_Cyrl_RS': {\n        'name': 'Serbian (Cyrillic, Serbia)',\n        'charset': 'UTF-8'\n    },\n    'sr_Latn': {\n        'name': 'Serbian (Latin)',\n        'charset': 'UTF-8'\n    },\n    'sr_Latn_BA': {\n        'name': 'Serbian (Latin, Bosnia and Herzegovina)',\n        'charset': 'UTF-8'\n    },\n    'sr_Latn_ME': {\n        'name': 'Serbian (Latin, Montenegro)',\n        'charset': 'UTF-8'\n    },\n    'sr_Latn_RS': {\n        'name': 'Serbian (Latin, Serbia)',\n        'charset': 'UTF-8'\n    },\n    'sr': {\n        'name': 'Serbian',\n        'charset': 'UTF-8'\n    },\n    'sn_ZW': {\n        'name': 'Shona (Zimbabwe)',\n        'charset': 'UTF-8'\n    },\n    'sn': {\n        'name': 'Shona',\n        'charset': 'UTF-8'\n    },\n    'ii_CN': {\n        'name': 'Sichuan Yi (China)',\n        'charset': 'UTF-8'\n    },\n    'ii': {\n        'name': 'Sichuan Yi',\n        'charset': 'UTF-8'\n    },\n    'si_LK': {\n        'name': 'Sinhala (Sri Lanka)',\n        'charset': 'UTF-8'\n    },\n    'si': {\n        'name': 'Sinhala',\n        'charset': 'UTF-8'\n    },\n    'sk_SK': {\n        'name': 'Slovak (Slovakia)',\n        'charset': 'ISO-8859-2'\n    },\n    'sk': {\n        'name': 'Slovak',\n        'charset': 'ISO-8859-2'\n    },\n    'sl_SI': {\n        'name': 'Slovenian (Slovenia)',\n        'charset': 'ISO-8859-2'\n    },\n    'sl': {\n        'name': 'Slovenian',\n        'charset': 'ISO-8859-2'\n    },\n    'xog_UG': {\n        'name': 'Soga (Uganda)',\n        'charset': 'UTF-8'\n    },\n    'xog': {\n        'name': 'Soga',\n        'charset': 'UTF-8'\n    },\n    'so_DJ': {\n        'name': 'Somali (Djibouti)',\n        'charset': 'UTF-8'\n    },\n    'so_ET': {\n        'name': 'Somali (Ethiopia)',\n        'charset': 'UTF-8'\n    },\n    'so_KE': {\n        'name': 'Somali (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'so_SO': {\n        'name': 'Somali (Somalia)',\n        'charset': 'UTF-8'\n    },\n    'so': {\n        'name': 'Somali',\n        'charset': 'UTF-8'\n    },\n    'es_AR': {\n        'name': 'Spanish (Argentina)',\n        'charset': 'UTF-8'\n    },\n    'es_BO': {\n        'name': 'Spanish (Bolivia)',\n        'charset': 'UTF-8'\n    },\n    'es_CL': {\n        'name': 'Spanish (Chile)',\n        'charset': 'UTF-8'\n    },\n    'es_CO': {\n        'name': 'Spanish (Colombia)',\n        'charset': 'UTF-8'\n    },\n    'es_CR': {\n        'name': 'Spanish (Costa Rica)',\n        'charset': 'UTF-8'\n    },\n    'es_DO': {\n        'name': 'Spanish (Dominican Republic)',\n        'charset': 'UTF-8'\n    },\n    'es_EC': {\n        'name': 'Spanish (Ecuador)',\n        'charset': 'UTF-8'\n    },\n    'es_SV': {\n        'name': 'Spanish (El Salvador)',\n        'charset': 'UTF-8'\n    },\n    'es_GQ': {\n        'name': 'Spanish (Equatorial Guinea)',\n        'charset': 'UTF-8'\n    },\n    'es_GT': {\n        'name': 'Spanish (Guatemala)',\n        'charset': 'UTF-8'\n    },\n    'es_HN': {\n        'name': 'Spanish (Honduras)',\n        'charset': 'UTF-8'\n    },\n    'es_419': {\n        'name': 'Spanish (Latin America)',\n        'charset': 'UTF-8'\n    },\n    'es_MX': {\n        'name': 'Spanish (Mexico)',\n        'charset': 'UTF-8'\n    },\n    'es_NI': {\n        'name': 'Spanish (Nicaragua)',\n        'charset': 'UTF-8'\n    },\n    'es_PA': {\n        'name': 'Spanish (Panama)',\n        'charset': 'UTF-8'\n    },\n    'es_PY': {\n        'name': 'Spanish (Paraguay)',\n        'charset': 'UTF-8'\n    },\n    'es_PE': {\n        'name': 'Spanish (Peru)',\n        'charset': 'UTF-8'\n    },\n    'es_PR': {\n        'name': 'Spanish (Puerto Rico)',\n        'charset': 'UTF-8'\n    },\n    'es_ES': {\n        'name': 'Spanish (Spain)',\n        'charset': 'UTF-8'\n    },\n    'es_US': {\n        'name': 'Spanish (United States)',\n        'charset': 'UTF-8'\n    },\n    'es_UY': {\n        'name': 'Spanish (Uruguay)',\n        'charset': 'UTF-8'\n    },\n    'es_VE': {\n        'name': 'Spanish (Venezuela)',\n        'charset': 'UTF-8'\n    },\n    'es': {\n        'name': 'Spanish',\n        'charset': 'UTF-8'\n    },\n    'sw_KE': {\n        'name': 'Swahili (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'sw_TZ': {\n        'name': 'Swahili (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'sw': {\n        'name': 'Swahili',\n        'charset': 'UTF-8'\n    },\n    'sv_FI': {\n        'name': 'Swedish (Finland)',\n        'charset': 'UTF-8'\n    },\n    'sv_SE': {\n        'name': 'Swedish (Sweden)',\n        'charset': 'UTF-8'\n    },\n    'sv': {\n        'name': 'Swedish',\n        'charset': 'UTF-8'\n    },\n    'gsw_CH': {\n        'name': 'Swiss German (Switzerland)',\n        'charset': 'UTF-8'\n    },\n    'gsw': {\n        'name': 'Swiss German',\n        'charset': 'UTF-8'\n    },\n    'shi_Latn': {\n        'name': 'Tachelhit (Latin)',\n        'charset': 'UTF-8'\n    },\n    'shi_Latn_MA': {\n        'name': 'Tachelhit (Latin, Morocco)',\n        'charset': 'UTF-8'\n    },\n    'shi_Tfng': {\n        'name': 'Tachelhit (Tifinagh)',\n        'charset': 'UTF-8'\n    },\n    'shi_Tfng_MA': {\n        'name': 'Tachelhit (Tifinagh, Morocco)',\n        'charset': 'UTF-8'\n    },\n    'shi': {\n        'name': 'Tachelhit',\n        'charset': 'UTF-8'\n    },\n    'dav_KE': {\n        'name': 'Taita (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'dav': {\n        'name': 'Taita',\n        'charset': 'UTF-8'\n    },\n    'ta_IN': {\n        'name': 'Tamil (India)',\n        'charset': 'UTF-8'\n    },\n    'ta_LK': {\n        'name': 'Tamil (Sri Lanka)',\n        'charset': 'UTF-8'\n    },\n    'ta': {\n        'name': 'Tamil',\n        'charset': 'UTF-8'\n    },\n    'te_IN': {\n        'name': 'Telugu (India)',\n        'charset': 'UTF-8'\n    },\n    'te': {\n        'name': 'Telugu',\n        'charset': 'UTF-8'\n    },\n    'teo_KE': {\n        'name': 'Teso (Kenya)',\n        'charset': 'UTF-8'\n    },\n    'teo_UG': {\n        'name': 'Teso (Uganda)',\n        'charset': 'UTF-8'\n    },\n    'teo': {\n        'name': 'Teso',\n        'charset': 'UTF-8'\n    },\n    'th_TH': {\n        'name': 'Thai (Thailand)',\n        'charset': 'TIS-620'\n    },\n    'th': {\n        'name': 'Thai',\n        'charset': 'TIS-620'\n    },\n    'bo_CN': {\n        'name': 'Tibetan (China)',\n        'charset': 'UTF-8'\n    },\n    'bo_IN': {\n        'name': 'Tibetan (India)',\n        'charset': 'UTF-8'\n    },\n    'bo': {\n        'name': 'Tibetan',\n        'charset': 'UTF-8'\n    },\n    'ti_ER': {\n        'name': 'Tigrinya (Eritrea)',\n        'charset': 'UTF-8'\n    },\n    'ti_ET': {\n        'name': 'Tigrinya (Ethiopia)',\n        'charset': 'UTF-8'\n    },\n    'ti': {\n        'name': 'Tigrinya',\n        'charset': 'UTF-8'\n    },\n    'to_TO': {\n        'name': 'Tonga (Tonga)',\n        'charset': 'UTF-8'\n    },\n    'to': {\n        'name': 'Tonga',\n        'charset': 'UTF-8'\n    },\n    'tr_TR': {\n        'name': 'Turkish (Turkey)',\n        'charset': 'ISO-8859-9'\n    },\n    'tr': {\n        'name': 'Turkish',\n        'charset': 'ISO-8859-9'\n    },\n    'uk_UA': {\n        'name': 'Ukrainian (Ukraine)',\n        'charset': 'KOI8-U'\n    },\n    'uk': {\n        'name': 'Ukrainian',\n        'charset': 'KOI8-U'\n    },\n    'ur_IN': {\n        'name': 'Urdu (India)',\n        'charset': 'UTF-8'\n    },\n    'ur_PK': {\n        'name': 'Urdu (Pakistan)',\n        'charset': 'UTF-8'\n    },\n    'ur': {\n        'name': 'Urdu',\n        'charset': 'UTF-8'\n    },\n    'uz_Arab': {\n        'name': 'Uzbek (Arabic)',\n        'charset': 'UTF-8'\n    },\n    'uz_Arab_AF': {\n        'name': 'Uzbek (Arabic, Afghanistan)',\n        'charset': 'UTF-8'\n    },\n    'uz_Cyrl': {\n        'name': 'Uzbek (Cyrillic)',\n        'charset': 'UTF-8'\n    },\n    'uz_Cyrl_UZ': {\n        'name': 'Uzbek (Cyrillic, Uzbekistan)',\n        'charset': 'UTF-8'\n    },\n    'uz_Latn': {\n        'name': 'Uzbek (Latin)',\n        'charset': 'UTF-8'\n    },\n    'uz_Latn_UZ': {\n        'name': 'Uzbek (Latin, Uzbekistan)',\n        'charset': 'UTF-8'\n    },\n    'uz': {\n        'name': 'Uzbek',\n        'charset': 'UTF-8'\n    },\n    'vi_VN': {\n        'name': 'Vietnamese (Vietnam)',\n        'charset': 'UTF-8'\n    },\n    'vi': {\n        'name': 'Vietnamese',\n        'charset': 'UTF-8'\n    },\n    'vun_TZ': {\n        'name': 'Vunjo (Tanzania)',\n        'charset': 'UTF-8'\n    },\n    'vun': {\n        'name': 'Vunjo',\n        'charset': 'UTF-8'\n    },\n    'cy_GB': {\n        'name': 'Welsh (United Kingdom)',\n        'charset': 'UTF-8'\n    },\n    'cy': {\n        'name': 'Welsh',\n        'charset': 'UTF-8'\n    },\n    'yo_NG': {\n        'name': 'Yoruba (Nigeria)',\n        'charset': 'UTF-8'\n    },\n    'yo': {\n        'name': 'Yoruba',\n        'charset': 'UTF-8'\n    },\n    'zu_ZA': {\n        'name': 'Zulu (South Africa)',\n        'charset': 'ISO-8859-1'\n    },\n    'zu': {\n        'name': 'Zulu',\n        'charset': 'ISO-8859-1'\n    }\n}\n")
    __stickytape_write_module('tabs/Code.py', b"# -*- coding: utf-8 -*-\n\nfrom .Menu import Menu\nfrom libs.config import Config\nfrom libs.language import Language\nfrom common import *\nfrom libs.codes import Code, Codes\n\n\nclass CodeMenu(Menu):\n    def __init__(self, config: Config, language: Language):\n        super().__init__(\n            title='CodeMenu',\n            description='code manager',\n            keys=('l')\n        )\n        self.__config = config\n        self.__language = language\n        self.__codes: Code = []\n\n    def run(self, **kwargs):\n        input(self.__language['code_menu'])\n        return 0\n")
    __stickytape_write_module('libs/codes.py', b"# -*- coding: utf-8 -*-\n\nimport string\nfrom common import *\nfrom typing import Optional, Union\n\n\nclass Code:\n    def __init__(\n        self,\n        *,\n        title: str = '',\n        authors: Union[str, list[str]] = '',\n        comment: str = '',\n        code: Union[str, bytes] = '',\n        enabled: bool = False,\n        raw_assembly: bool = False,\n        assembly_ram_writes: Optional[bool] = None\n    ):\n        self.title = title\n        self._authors = []\n        self.authors = authors  # setter\n        self._comment = comment  # setter\n        self.code = code  # setter\n        self.enabled = enabled\n        self.raw_assembly = raw_assembly\n        self.__assembly_ram_writes = assembly_ram_writes\n\n    def __repr__(self):\n        return '%s(title=\\'%s\\',author=\\'%s\\',comment=\\'%s\\',enabled=%s,assembly_ram_writes)' % (\n            self.__class__.__name__, self.title, self.authors, self._comment, self.enabled)\n\n    @property\n    def arw_auto_detect(self):\n        return self.__assembly_ram_writes is None\n\n    @property\n    def code(self):\n        return self.__code\n\n    @code.setter\n    def code(self, code: Union[str, bytes]):\n        if isinstance(code, bytes):\n            code = code.hex()\n        self.__code = self.format_code(code)\n\n    @property\n    def authors(self):\n        return self._authors\n\n    @authors.setter\n    def authors(self, value: Union[str, list[str]]):\n        if isinstance(value, str):\n            self._authors = value\n        elif isinstance(value, list):\n            self._authors = ','.join(value)\n\n    @property\n    def comment(self):\n        return self._comment.rstrip()\n\n    @comment.setter\n    def comment(self, value: str):\n        self._comment = value\n\n    def __iadd__(self, other):\n        if isinstance(other, bytes):\n            other = other.hex()\n        self.__code += other\n        self.__code = self.format_code(self.__code)\n        return self\n\n    @property\n    def assembly_ram_writes(self):\n        if self.__assembly_ram_writes is not None:\n            return self.__assembly_ram_writes\n\n        # TODO \xe4\xb8\x8d\xe5\xae\x8c\xe5\x85\xa8\n        for line in self.__code.splitlines():\n            line = line.lstrip('#')\n            if (\n                line == 'D0000000 DEADCAFE' or\n                line.startswith('C0') or\n                line.startswith('00020000') or\n                line.startswith('09020000')\n            ):\n                return False\n        return True\n\n    @assembly_ram_writes.setter\n    def assembly_ram_writes(self, state: Union[bool, None]):\n        self.__assembly_ram_writes = state\n\n    # TODO \xe3\x82\xb3\xe3\x83\xbc\xe3\x83\x89\xe3\x81\x8c\xe6\xad\xa3\xe3\x81\x97\xe3\x81\x84\xe3\x81\x8b\xe5\x90\xa6\xe3\x81\x8b\xe3\x81\xae\xe9\x96\xa2\xe6\x95\xb0 \xe4\xbd\x9c\xe3\x82\x89\xe3\x81\xaa\xe3\x81\x84\xe3\x81\xaa\xe3\x82\x89\xe5\x89\x8a\xe9\x99\xa4\n    # @classmethod\n    # def check_code(cls, code: str):\n    #     if len(cls.remove_white_space(code)) % 16 != 0:\n    #         ...\n\n    @classmethod\n    def format_code(cls, code: str):\n        code = cls.remove_white_space(code)\n\n        result = ''\n\n        i, c = 0, 0\n        while i * 16 + c < len(code):\n            p1 = code[i * 16 + c: i * 16 + 16 + c]\n            p2 = code[i * 16 + c: i * 17 + 17]\n\n            if p1.startswith('#'):\n                c += 1\n                line = p2[:9] + ' ' + p2[9:]\n            else:\n                line = p1[:8] + ' ' + p1[8:]\n\n            result += line[:18] + '\\n'\n\n            i += 1\n\n        return result.rstrip('\\n').upper()\n\n    @classmethod\n    def remove_white_space(cls, string_: Union[str, None]):\n        if string_ is None:\n            return None\n        for white_space in string.whitespace:\n            string_ = string_.replace(white_space, '')\n        return string_\n\n\nclass Codes:\n    def __init__(self, *codes: Code):\n        self.__codes: list[Code] = []\n        self.add_code(*codes)\n\n    def add_code(self, *codes: Code):\n        for code in codes:\n            self.__codes.append(code)\n\n    def get_codes(self, enabled: Optional[bool] = None):\n        return [code for code in self.__codes if enabled is None or (code.enabled == enabled)]\n\n    def __delitem__(self, key: int):\n        self.__codes.__delitem__(key)\n\n    def __getitem__(self, key: int):\n        return self.__codes[key]\n\n    def __setitem__(self, key: int, value: Code):\n        self.__codes[key] = value\n\n    def __len__(self):\n        return len(self.get_codes())\n")
    __stickytape_write_module('tabs/Exit.py', b"# -*- coding: utf-8 -*-\n\nfrom .Menu import Menu\nfrom libs.config import Config\nfrom libs.language import Language\nfrom common import *\nfrom libs.cmdparser import Command\n\n\nclass ExitMenu(Menu):\n    def __init__(self, config: Config, language: Language,):\n        super().__init__(\n            title='Exit',\n            description='Exit TermGecko',\n            keys=('e', 'exit')\n        )\n        self.__config = config\n        self.__language = language\n\n    def run(self, **kwargs):\n        command = Command(\n            yes_or_no=(str, lambda x: x.lower() in ['y', 'n', 'yes', 'no'])\n        )\n\n        try:\n            print('[%s]\\ny: %s\\nn: %s' % (self.__language['exit'], self.__language['yes'], self.__language['no']))\n            yes_or_no = command.input('\\n' + self.__language['exit_confirm'] + ' (y/n) > ').get('yes_or_no')\n        except ValueError:\n            return\n        else:\n            if yes_or_no.valid == False:\n                return -1\n\n        arg = yes_or_no.arg.lower()\n\n        if arg in ['y', 'yes']:\n            clear()\n            exit()\n        elif arg in ['n', 'no']:\n            return 0\n")
    __stickytape_write_module('tabs/Help.py', b"# -*- coding: utf-8 -*-\n\nfrom .Menu import Menu\nfrom libs.config import Config\nfrom libs.language import Language\nfrom common import *\nfrom libs.cmdparser import Command\n\n\nclass HelpMenu(Menu):\n    def __init__(self, config: Config, language: Language):\n        super().__init__(\n            title='Help',\n            description='Help menu',\n            keys=('h', 'help')\n        )\n        self.__config = config\n        self.__language = language\n\n    def run(self, **kwargs):\n        input('\xe3\x83\x98\xe3\x83\xab\xe3\x83\x97\xe3\x83\xa1\xe3\x83\x8b\xe3\x83\xa5\xe3\x83\xbc')\n        return 0\n")
    __stickytape_write_module('tabs/Setting.py', b"# -*- coding: utf-8 -*-\n\nfrom typing import Any, Optional, Callable\nfrom libs.config import Config\nfrom libs.language import Language\nfrom libs.cmdparser import Command\n# from libs.language_codes import LANGUAGE_CODES\nfrom common import *\nfrom .Menu import Menu\nfrom common import *\nfrom time import sleep\n\n\nclass Setting:\n    def __init__(\n        self,\n        title: str,\n        description: str,\n        language: Language,\n        setting_type: type,\n        config: Config,\n        section: str,\n        key: str,\n        default_value: Optional[Any] = None,\n        restart_required: bool = False,\n        formula: Optional[Callable[[Any], bool]] = None,\n    ):\n        # if setting_type not in (bool, int, float, str, list):\n        #     raise ValueError('Invalid setting type. Allowed types are (bool, int, float, str)')\n\n        # NOTE \xe7\xb6\x99\xe6\x89\xbf\xe3\x81\x99\xe3\x82\x8b\xe3\x81\x9f\xe3\x82\x81\xe5\x85\xa8\xe3\x81\xa6Protected\n        self._title = title\n        self._description = description\n        self._language = language\n        self._setting_type = setting_type\n        self._config = config\n        self._section = section\n        self._key = key\n        self._default_value = default_value\n        self._restart_required = restart_required\n        self._formula = formula\n        self._changed = False\n\n        # TODO \xe7\x9f\xad\xe3\x81\x8f\xe3\x81\x99\xe3\x82\x8b\n        if self._section in self._config and self._key in self._config[self._section]:\n            self._data = self._config[self._section][self._key]\n        else:\n            self._data = self._default_value\n\n    @classmethod\n    def get_type_str(cls, language: Language, type_: type):\n        type_str = {\n            bool: language['boolean'],\n            str: language['string'],\n            float: language['float'],\n            int: language['integer']\n        }\n        return type_str.get(type_)\n\n    @property\n    def restart_required(self):\n        return self._restart_required and self._changed\n\n    def run(self, **kwargs):\n        type_ = self._setting_type\n\n        if type_ == bool:\n            self._config.setdefault(self._section, {})\n            self._config[self._section].setdefault(\n                self._key, self._default_value)\n            value = not self._config[self._section][self._key]\n            self._config[self._section][self._key] = value\n            self._data = value\n        else:\n            while True:\n                default_value = self._default_value\n                if default_value is None:\n                    pass\n                elif isinstance(default_value, str):\n                    default_value = '\\'' + default_value + '\\''\n                elif isinstance(default_value, bool):\n                    default_value = 'ON' if default_value else 'OFF'\n                elif isinstance(default_value, (int, float)):\n                    default_value = str(default_value)\n                # else:\n                #     raise TypeError('Type \\'%s\\' is not supported' % (type(default_value)))\n\n                clear()\n\n                print('[%s]\\n%s\\n' % (self._title, self._description), end='')\n                if self._default_value is None:\n                    print()\n                else:\n                    print('%s: %s\\n' % (self._language['default'], default_value))\n\n                try:\n                    result = Command(arg1=type_).input('%s > ' % (\n                        self.get_type_str(self._language, type_)), True)\n                except ValueError:\n                    continue\n\n                if result is None:\n                    return -1\n\n                value = result.get('arg1')\n\n                if self._formula is not None:\n                    try:\n                        if not self._formula(value.arg):\n                            value.valid = False\n                    except TypeError:\n                        print(' - ' + self._language['incorrect_type'])\n                        value.valid = False\n\n                if value.valid == False:\n                    print(' - ' + self._language['format_is_incorrect'])\n                    sleep(1)\n                    continue\n\n                self._config.setdefault(self._section, {self._key: None})\n                self._config[self._section][self._key] = value.arg\n\n                self._data = value.arg\n                break\n            clear()\n\n        self._changed = True\n\n        return 0\n\n    @property\n    def state(self):\n        return self._data\n\n    @property\n    def description(self):\n        return self._description\n\n    @property\n    def title(self):\n        return self._title\n\n    @property\n    def type(self):\n        return self._setting_type\n\n\nclass ListSetting(Setting):\n    def __init__(\n        self,\n        title: str,\n        description: str,\n        language: Language,\n        choices: list[Any],\n        config: Config,\n        section: str,\n        key: str,\n        default_value: Optional[int] = None,\n        restart_required: bool = False,\n    ):\n        super().__init__(\n            title=title,\n            description=description,\n            setting_type=str,\n            config=config,\n            section=section,\n            key=key,\n            # default_value=default_value,\n            restart_required=restart_required,\n            language=language\n        )\n        self._choices = choices\n        self._default_value = default_value\n\n    def run(self, **kwargs):\n        while True:\n            clear()\n\n            print('[%s]' % (self._title))\n\n            for i, choice in enumerate(self._choices):\n                if isinstance(choice, str):\n                    choice = '\\'' + choice + '\\''\n                else:\n                    choice = str(choice)\n                print('%s \xe2\x94\x82 %s' % (\n                    str(len(self._choices) - i).ljust(digit_count(len(self._choices))),\n                    choice\n                ))\n\n            print('\\n' + self._description)\n\n            if self._default_value is None:\n                print()\n            else:\n                print('%s: \\'%s\\'\\n' % (self._language['default'], self._choices[self._default_value]))\n\n            command = Command(\n                index=(int, lambda i: i - 1 in range(len(self._choices))))\n            try:\n                result = command.input('%s > ' % (self._language['select_an_index']), True)\n            except ValueError:\n                continue\n            if result is None:\n                return -1\n\n            value = result.get('index')\n\n            self._config.setdefault(self._section, {self._key: None})\n            value_ = self._choices[len(self._choices) - value.arg]\n            self._config[self._section][self._key] = value_\n            self._data = value_\n            break\n\n        clear()\n        self._changed = True\n        return 0\n\n\n# -----------------------------------\n\n\nclass SettingMenu(Menu):\n    def __init__(self, config: Config, language: Language):\n        super().__init__(\n            title='Settings',\n            description='Settings menu',\n            keys=('s', 'setting', 'settings')\n        )\n        self.__config = config\n        self.__language = language\n\n        # NOTE \xe8\xa8\xad\xe5\xae\x9a\xe3\x83\xaa\xe3\x82\xb9\xe3\x83\x88\n        # CHECK\n        self.__settings = [\n            Setting(language['ip_address'], language['enter_ip_address'], language, str, config, 'TCPGecko', 'IPAddress', '192.168.0.0',\n                    formula=lambda x: is_valid_ip_address(x)),\n            Setting(language['port'], language['enter_port'], language, int, config, 'TCPGecko', 'Port', 7331,\n                    formula=lambda x: 0 <= x <= 65535),\n            # Setting('Bool example', 'example description', language, bool, config, 'General', 'BoolExample', False),\n            Setting(language['codelist_path'], language['enter_path'], language, str, config, 'General', 'CodeListPath', 'code_list.txt'),\n            ListSetting(language['language'], language['select_language'], language, ['ja_JP', 'en_US'], config, 'General', 'Language', 0,\n                        restart_required=True),\n        ]\n\n        Setting(language['port'], language['enter_port'], language, int, config, 'TCPGecko', 'Port', 7331,\n                formula=lambda x: 0 <= x <= 65535),\n\n    def run(self, **kwargs):\n        clear()\n\n        print('[%s]' % (self.__language['settings']))\n\n        if self.__settings == []:\n            print(' - ' + self.__language['no_settings'])\n            sleep(2)\n            return 0\n\n        for i, setting in enumerate(self.__settings):\n            print('%s \xe2\x94\x82 %s' % (\n                str(len(self.__settings) - i).ljust(digit_count(len(self.__settings))),\n                setting.title\n            ), end='')\n\n            state = setting.state\n            if isinstance(setting.state, str):\n                state = '\\'' + str(state) + '\\''\n            elif isinstance(setting.state, bool):\n                state = 'ON' if state else 'OFF'\n            else:\n                state = str(state)\n\n            print(': ' + state)\n\n        restart_required_list: list[Setting] = []\n        for setting in self.__settings:\n            if setting.restart_required:\n                restart_required_list.append(setting)\n\n        if restart_required_list != []:\n            print('\\n - %s: %s' % (self.__language['restart_required'], ','.join(['\\'' + setting.title + '\\'' for setting in restart_required_list])))\n\n        command = Command(\n            index=(int, lambda i: i - 1 in range(len(self.__settings))))\n        try:\n            result = command.input('\\n' + self.__language['select_an_index'] + ' > ', True)\n        except ValueError:\n            return 1\n        if result is None:\n            return 0\n\n        index = result.get('index')\n\n        if index.valid == False:\n            return -1\n\n        setting: Setting = self.__settings[len(self.__settings) - index.arg]\n        status = setting.run()\n\n        if status == 0:\n            self.__config.save()\n            clear()\n\n            state = setting.state\n            if isinstance(setting, str):\n                state = '\\'' + state + '\\''\n            elif isinstance(setting.state, bool):\n                state = 'ON' if state else 'OFF'\n            else:\n                state = str(state)\n\n            print(' - ' + self.__language['changed_to'] % (setting.title, state))\n            sleep(1)\n")
    # -*- coding: utf-8 -*-
    
    import argparse
    
    from common import *
    from termgecko import TermGecko
    # from libs import fs
    from libs.config import Config
    from tabs.Setting import SettingMenu
    
    
    def main():
        parser = argparse.ArgumentParser(description='TermGecko')
        parser.add_argument('--DEBUG', action='store_true', help='Enable debug mode')
        args = parser.parse_args()
    
        termGecko = TermGecko(
            debug_mode=args.DEBUG
        )
    
        termGecko.init()
    
        while True:
            termGecko.proc()
    
    
    if __name__ == '__main__':
        main()
    